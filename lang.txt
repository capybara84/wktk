
toplevel
    = { ';' | NEWLINE | topdecl }
topdecl
    = module | import | type_def | decl_def | expr
program
    = { ';' | NEWLINE | decl }
decl
    = module | import | type_def | decl_def | id_def
id_def
    = ID {params} '=' expr
    | ID ':' typexpr
params
    = { ID | '()' }
decl_def
    = DECL ID ':' typexpr

module
    = MODULE ID
import
    = IMPORT ID [AS ID]

type_def
    = TYPE type_decl 

type_decl
    = [type_params] ID '=' type_representation
type_params
    = TVAR
    | '(' TVAR {',' TVAR} ')'
type_representation
    = '|' constr_decl {'|' constr_decl }
    | '{' field_decl sep {field_decl sep } '}'
    | typexpr
constr_decl
    = ID [typexpr]
field_decl
    = [MUT] ID ':' typexpr
typexpr
    = typexpr_tuple ['->' typexpr]
typexpr_tuple
    = typexpr_ctor {'*' typexpr_ctor}
typexpr_ctor
    = '(' typexpr {',' typexpr} ')' {typname}
    | typexpr_primary {typname}
typexpr_primary
    = TVAR | typname | '(' typexpr ')'
typname
    = {ID '.'} ID
sep = ';' | NEWLINE

expr
    = ';'
    | NEWLINE
    | decl_def
    | let_expr
    | if_expr
    | fn_expr
    | comp_expr
    | assign_expr
sep = (NEWLINE | ';') {NEWLINE | ';'}

let_expr
    = LET [MUT] id_def [INDENT {[MUT] id_def} DEDENT] IN expr
if_expr
    = IF expr THEN expr [ELSE expr]
fn_expr
    = FN params '->' expr
comp_expr
    = INDENT {expr sep} DEDENT

assign_expr
    = cond_expr ['<-' expr]
cond_expr
    = lor_expr ['?' expr ':' expr]
lor_expr
    = land_expr {'||' lor_expr}
land_expr
    = rel_expr {'&&' land_expr}
rel_expr
    = cons_expr {rel_op cons_expr}
cons_expr
    = add_expr {'::' cons_expr}
add_expr
    = mul_expr {('+'|'-') add_expr}
mul_expr
    = apply_expr {('*'|'/'|'%') mul_expr}
apply_expr
    = unary_expr {postfix_expr}
unary_expr
    = ['!'|'-'] postfix_expr
postfix_expr
    = simple_expr {'.' ID}
    | simple_expr {'.[' expr ']'}
simple_expr
    = ID | BOOL_LIT | INT_LIT | CHAR_LIT | FLOAT_LIT | STRING_LIT 
    | list_expr | array_expr | '[]' | '(' expr {',' expr} ')'
    | record_expr
list_expr
    = '[' [expr {',' expr}] [','] ']'
array_expr
    = '[|' expr {',' expr} [','] '|]'
record_expr
    = '{' {ID '=' expr sep} '}'

----
module Graphics2D
type 'a pt = {
    x : 'a
    y : 'a
}
get_x p = p.x
get_y p = p.y

module Graphics3D
type 'a pt = {
    x : 'a
    y : 'a
    z : 'a
}
get_x p = p.x
get_y p = p.y
get_z p = p.z

----

qsort : 'a list -> 'a list
qsort lst =
    if lst = [] then []
    else
        let pivot = List.hd lst
            rest = List.tl lst
            less = List.filter (fn x -> x < = pivot) rest
            greater = List.filter (fn x -> x > pivot) rest
        in
        qsort less + [pivot] + qsort greater

---
type exp =
    | Int int
    | Id string
    | Add exp * exp
    | Eq exp * exp
    | Lt exp * exp
    | Cond exp * exp * exp
    | Let string * exp * exp
    | Letrec string * exp * exp
    | Lambda string * exp
    | Apply exp * exp
type
    value =
        | VInt int
        | VBool bool
        | VClosure id * exp * env_t
type
    env_t = (id * value) list

eval : env_t -> exp -> value
eval env x =
    match x
        | Int n -> VInt n
        | Id x -> List.assoc x env
        | Add (x, y) ->
            match (eval env x, eval env y)
                | (VInt a, VInt b) -> VInt (a + b)
                | _ -> failwith "int expected"
        | Let (id, e, body) ->
            let new_env = (id, env) :: (eval env e) in
            eval new_env body
        | Lambda (arg, body) ->
            Closure (arg, body, env)

